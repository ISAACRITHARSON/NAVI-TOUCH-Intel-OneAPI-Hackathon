import cv2 as cv
import numpy as np
from keras.utils import img_to_array
import numpy as np
from keras.models import load_model
import serial


cnn_model = load_model('D:\Blind\Data\model2.h5')
# ser = serial.Serial('COM11',9600)
# Distance constants 
KNOWN_DISTANCE = 45 #INCHES
PERSON_WIDTH = 16 #INCHES
MOBILE_WIDTH = 3.0 #INCHES
CAR_WIDTH=15
BIKE_WIDTH=10
CYCLE_WIDTH=7

# Object detector constant 
CONFIDENCE_THRESHOLD = 0.4
NMS_THRESHOLD = 0.3

# colors for object detected
COLORS = [(255,0,0),(255,0,255),(0, 255, 255), (255, 255, 0), (0, 255, 0), (255, 0, 0)]
GREEN =(0,255,0)
BLACK =(0,0,0)
# defining fonts 
FONTS = cv.FONT_HERSHEY_COMPLEX

# getting class names from classes.txt file 
class_names = []
with open("classes.txt", "r") as f:
    class_names = [cname.strip() for cname in f.readlines()]
#  setttng up opencv net
yoloNet = cv.dnn.readNet('yolov4-tiny.weights', 'yolov4-tiny.cfg')

yoloNet.setPreferableBackend(cv.dnn.DNN_BACKEND_CUDA)
yoloNet.setPreferableTarget(cv.dnn.DNN_TARGET_CUDA_FP16)

model = cv.dnn_DetectionModel(yoloNet)
model.setInputParams(size=(416, 416), scale=1/255, swapRB=True)



def cnn(image):
    img = cv.resize(frame, (224, 224))
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.  # scale pixel values to [0,1]
    prediction = cnn_model.predict(img_array)
    predicted_class = np.argmax(prediction)

    # Control the servo motor based on the predicted class
    # if predicted_class == 0:
    #     print("Sending signal to move servo from left to right continuously")
    #     ser.write(b'0') # Move servo from left to right continuously
    #     print("Signal sent")
    # elif predicted_class == 1:
    #     print("Sending signal to move servo to left")
    #     ser.write(b'1') # Move servo to left
    #     print("Signal sent")
    #     print("Waiting for Arduino response")
    #     ser.read() # Wait until Arduino signals that it has finished moving
    #     print("Received response from Arduino")
    # elif predicted_class == 2:
    #     print("Sending signal to move servo to right")
    #     ser.write(b'2') # Move servo to right
    #     print("Signal sent")
    #     print("Waiting for Arduino response")
    #     ser.read() # Wait until Arduino signals that it has finished moving
    #     print("Received response from Arduino")

    class_names = ['Center', 'Left', 'Right']
    predicted_name = class_names[predicted_class]
    return predicted_name

# object detector funciton /method
def object_detector(image):
    classes, scores, boxes = model.detect(image, CONFIDENCE_THRESHOLD, NMS_THRESHOLD)
    # creating empty list to add objects data
    data_list =[]
    for (classid, score, box) in zip(classes, scores, boxes):
        # define color of each, object based on its class id 
        # color= COLORS[int(classid) % len(COLORS)]
        #
        # label = "%s : %f" % (class_names[0], score)
        #
        # # draw rectangle on and label on object
        # cv.rectangle(image, box, color, 2)
        # cv.putText(image, label, (box[0], box[1]-14), FONTS, 0.5, color, 2)
        # getting the data 
        # 1: class name  2: object width in pixels, 3: position where have to draw text(distance)
        if classid ==0: # person class id
            color = COLORS[int(classid) % len(COLORS)]

            label = "%s : %f" % (class_names[0], score)

            # draw rectangle on and label on object
            cv.rectangle(image, box, color, 2)
            cv.putText(image, label, (box[0], box[1] - 14), FONTS, 0.5, color, 2)
            data_list.append([class_names[0], box[2], (box[0], box[1]-2)])

        elif classid == 2:  # car
            color = COLORS[int(classid) % len(COLORS)]

            label = "%s : %f" % (class_names[2], score)

            # draw rectangle on and label on object
            cv.rectangle(image, box, color, 2)
            cv.putText(image, label, (box[0], box[1] - 14), FONTS, 0.5, color, 2)
            data_list.append([class_names[0], box[2], (box[0], box[1] - 2)])

        elif classid == 1:  # car
            color = COLORS[int(classid) % len(COLORS)]

            label = "%s : %f" % (class_names[1], score)

            # draw rectangle on and label on object
            cv.rectangle(image, box, color, 2)
            cv.putText(image, label, (box[0], box[1] - 14), FONTS, 0.5, color, 2)
            data_list.append([class_names[0], box[2], (box[0], box[1] - 2)])

        elif classid == 3:  # car
            color = COLORS[int(classid) % len(COLORS)]

            label = "%s : %f" % (class_names[3], score)

            # draw rectangle on and label on object
            cv.rectangle(image, box, color, 2)
            cv.putText(image, label, (box[0], box[1] - 14), FONTS, 0.5, color, 2)
            data_list.append([class_names[0], box[2], (box[0], box[1] - 2)])

        elif classid ==67:
            color = COLORS[int(classid) % len(COLORS)]

            label1 = "%s : %f" % (class_names[67], score)

            # draw rectangle on and label on object
            cv.rectangle(image, box, color, 2)
            cv.putText(image, label1, (box[0], box[1] - 14), FONTS, 0.5, color, 2)
            data_list.append([class_names[0], box[2], (box[0], box[1]-2)])
        # if you want inclulde more classes then you have to simply add more [elif] statements here
        # returning list containing the object data. 
    return data_list

def focal_length_finder (measured_distance, real_width, width_in_rf):
    focal_length = (width_in_rf * measured_distance) / real_width

    return focal_length

# distance finder function 
def distance_finder(focal_length, real_object_width, width_in_frmae):
    distance = (real_object_width * focal_length) / width_in_frmae
    return distance

# reading the reference image from dir 
ref_person = cv.imread('ReferenceImages/image14.png')
ref_mobile = cv.imread('ReferenceImages/image4.png')
ref_car = cv.imread('ReferenceImages/image3.png')
ref_bike = cv.imread('ReferenceImages/image2.png')
ref_cycle = cv.imread('ReferenceImages/image1.png')

mobile_data = object_detector(ref_mobile)
mobile_width_in_rf = mobile_data[1][1]

person_data = object_detector(ref_person)
person_width_in_rf = person_data[0][1]

# getting pixel width for car
car_data = object_detector(ref_car)
car_width_in_rf = car_data[0][1]

bike_data = object_detector(ref_bike)
bike_width_in_rf = car_data[0][1]

# cycle_data = object_detector(ref_cycle)
# cycle_width_in_rf = cycle_data[3][1]

print(f"Person width in pixels : {person_width_in_rf} mobile width in pixel: {mobile_width_in_rf}")

# finding focal length 
focal_person = focal_length_finder(KNOWN_DISTANCE, PERSON_WIDTH, person_width_in_rf)

focal_mobile = focal_length_finder(KNOWN_DISTANCE, MOBILE_WIDTH, mobile_width_in_rf)

focal_car = focal_length_finder(KNOWN_DISTANCE, CAR_WIDTH, car_width_in_rf)
focal_bike = focal_length_finder(KNOWN_DISTANCE, BIKE_WIDTH, bike_width_in_rf)
focal_cycle = focal_length_finder(KNOWN_DISTANCE, CYCLE_WIDTH, bike_width_in_rf)

cap = cv.VideoCapture(0)
while True:
    ret, frame = cap.read()

    cnn_output = cnn(frame)
    data = object_detector(frame) 
    for d in data:
        if d[0] =='person':
            distance = distance_finder(focal_person, PERSON_WIDTH, d[1])
            if distance <=30:
                print('Stop')
            else :
                print('Please move')
            x, y = d[2]
        elif d[0] =='cell phone':
            distance = distance_finder (focal_mobile, MOBILE_WIDTH, d[1])
            x, y = d[2]
        elif d[0] =='car':
            distance = distance_finder (focal_car, CAR_WIDTH, d[1])
            if distance <=50:
                print('Stop')
            else :
                print('Please move')
            x, y = d[2]
            x, y = d[2]
        elif d[0] =='motorbike':
            distance = distance_finder (focal_bike, BIKE_WIDTH, d[1])
            x, y = d[2]
            if distance <=50:
                print('Stop')
            else :
                print('Please move')
            x, y = d[2]
        elif d[0] =='bicycle':
            distance = distance_finder (focal_cycle, CYCLE_WIDTH, d[1])
            x, y = d[2]
            if distance <=50:
                print('Stop')
            else :
                print('Please move')
            x, y = d[2]

        cv.rectangle(frame, (x, y-3), (x+150, y+23),BLACK,-1 )
        cv.putText(frame, f'Dis: {round(distance,2)} inch', (x+5,y+13), FONTS, 0.48, GREEN, 2)
    cv.putText(frame, cnn_output, (10, 50), cv.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv.LINE_AA)
    cv.imshow('frame',frame)

    key = cv.waitKey(1)
    if key ==ord('q'):
        break
cv.destroyAllWindows()
cap.release()

